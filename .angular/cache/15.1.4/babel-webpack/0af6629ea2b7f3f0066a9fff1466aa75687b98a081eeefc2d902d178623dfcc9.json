{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nexport class MockXHRBackend {\n  constructor() {\n    this.mediaItems = [{\n      id: 1,\n      name: 'Firebug',\n      medium: 'Series',\n      category: 'Science Fiction',\n      year: 2010,\n      watchedOn: 1294166565384,\n      isFavorite: false\n    }, {\n      id: 2,\n      name: 'The Small Tall',\n      medium: 'Movies',\n      category: 'Comedy',\n      year: 2015,\n      watchedOn: null,\n      isFavorite: true\n    }, {\n      id: 3,\n      name: 'The Redemption',\n      medium: 'Movies',\n      category: 'Action',\n      year: 2016,\n      watchedOn: null,\n      isFavorite: false\n    }, {\n      id: 4,\n      name: 'Hoopers',\n      medium: 'Series',\n      category: 'Drama',\n      year: null,\n      watchedOn: null,\n      isFavorite: true\n    }, {\n      id: 5,\n      name: 'Happy Joe: Cheery Road',\n      medium: 'Movies',\n      category: 'Action',\n      year: 2015,\n      watchedOn: 1457166565384,\n      isFavorite: false\n    }];\n  }\n  handle(request) {\n    return new Observable(responseObserver => {\n      let responseOptions;\n      switch (request.method) {\n        case 'GET':\n          if (request.urlWithParams.indexOf('mediaitems?medium=') >= 0 || request.url === 'mediaitems') {\n            let medium;\n            if (request.urlWithParams.indexOf('?') >= 0) {\n              medium = request.urlWithParams.split('=')[1];\n              if (medium === 'undefined') {\n                medium = '';\n              }\n            }\n            let mediaItems;\n            if (medium) {\n              mediaItems = this.mediaItems.filter(i => i.medium === medium);\n            } else {\n              mediaItems = this.mediaItems;\n            }\n            responseOptions = {\n              body: {\n                mediaItems: JSON.parse(JSON.stringify(mediaItems))\n              },\n              status: 200\n            };\n          } else {\n            let mediaItems;\n            const idToFind = parseInt(request.url.split('/')[1], 10);\n            mediaItems = this.mediaItems.filter(i => i.id === idToFind);\n            responseOptions = {\n              body: JSON.parse(JSON.stringify(mediaItems[0])),\n              status: 200\n            };\n          }\n          break;\n        case 'POST':\n          const mediaItem = request.body;\n          mediaItem.id = this._getNewId();\n          this.mediaItems.push(mediaItem);\n          responseOptions = {\n            status: 201\n          };\n          break;\n        case 'DELETE':\n          const id = parseInt(request.url.split('/')[1], 10);\n          this._deleteMediaItem(id);\n          responseOptions = {\n            status: 200\n          };\n      }\n      const responseObject = new HttpResponse(responseOptions);\n      responseObserver.next(responseObject);\n      responseObserver.complete();\n      return () => {};\n    });\n  }\n  _deleteMediaItem(id) {\n    const mediaItem = this.mediaItems.find(i => i.id === id);\n    const index = this.mediaItems.indexOf(mediaItem);\n    if (index >= 0) {\n      this.mediaItems.splice(index, 1);\n    }\n  }\n  _getNewId() {\n    if (this.mediaItems.length > 0) {\n      return Math.max.apply(Math, this.mediaItems.map(mediaItem => mediaItem.id)) + 1;\n    } else {\n      return 1;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}